/* eslint-disable @typescript-eslint/no-misused-promises */

import { type NextPage } from "next";
import Head from "next/head";
import {useForm} from "react-hook-form"
import { type z } from "zod";
import { FormError } from "~/components/forms/formError";
import { ProductSchema } from "~/server/api/routers/product";


import { api } from "~/utils/api";

const Home: NextPage = () => {
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });
const {mutateAsync,isSuccess,isLoading,isError,} = api.product.create.useMutation()
  
type ProductType = z.infer<typeof ProductSchema>

const {handleSubmit,register, formState:{isSubmitting,errors},reset} = useForm<ProductType>()

  async function hadleRegisterProduct(data:ProductType) {
    try{
      const product = await mutateAsync({
        description:data.description,
        price:Number(data.price)/60,
        name:data.name,
        subtitle:data.subtitle,
        translations:[]
      })
      if(isSuccess){
        alert(`O produto ${product.name} foi cadastrado com sucesso`)
      }
      reset()
    }catch(err){
      alert("Não foi possivel cadastrar seu produto")
      console.error(err)
      return
    }finally{}
  }

  return (
    <>
      <Head>
        <title>Z-center</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="w-full h-full bg-gray-900 flex">
      <form action="submit" onSubmit={handleSubmit(hadleRegisterProduct)} className=" flex flex-col gap-4 w-96 m-auto bg-gray-200 rounded-lg p-4 ">
        
        <input type="text" {...register("name")} placeholder="Nome do produto"  className="p-2 rounded-sm"/>
        {/* {errors.name?.message ? <FormError><span></span></FormError>:""} */}
     
        <input type="text" {...register("subtitle")} placeholder="Titulo do produto"  className="p-2 rounded-sm"/>
        <textarea  {...register("description")} placeholder="Descrição do produto" className="p-2 rounded-sm"/>
        <input type="number" {...register("price")} placeholder="Preço do produto" className="p-2  rounded-sm" />
        <button disabled={isSubmitting} className="bg-gray-900 p-1 rounded-sm text-gray-100 disabled:cursor-not-allowed">cadastrar</button>
      </form>
      </main>
      
    </>
  );
};

export default Home;
